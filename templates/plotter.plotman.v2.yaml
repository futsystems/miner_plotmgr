# Default/example plotman.yaml configuration file

# https://github.com/ericaltendorf/plotman/wiki/Configuration#versions
version: [2]

logging:
        # One directory in which to store all plot job logs (the STDOUT/
        # STDERR of all plot jobs).  In order to monitor progress, plotman
        # reads these logs on a regular basis, so using a fast drive is
        # recommended.
        plots: /opt/chia/logs
        # transfers:
        # application:

# Options for display and rendering
user_interface:
        # Call out to the `stty` program to determine terminal size, instead of
        # relying on what is reported by the curses library.   In some cases,
        # the curses library fails to update on SIGWINCH signals.  If the
        # `plotman interactive` curses interface does not properly adjust when
        # you resize the terminal window, you can try setting this to True.
        use_stty_size: True

# Optional custom settings for the subcommands (status, interactive etc)
commands:
        interactive:
                # Set it to False if you don't want to auto start plotting when 'interactive' is ran.
                # You can override this value from the command line, type "plotman interactive -h" for details
                autostart_plotting: True
                autostart_archiving: False

# Where to plot and log.
directories:
        # One or more directories to use as tmp dirs for plotting.  The
        # scheduler will use all of them and distribute jobs among them.
        # It assumes that IO is independent for each one (i.e., that each
        # one is on a different physical device).
        #
        # If multiple directories share a common prefix, reports will
        # abbreviate and show just the uniquely identifying suffix.
        tmp:{% for cache in data['cache_list']%}
                - {{cache['mount_path']}}{% endfor %}

        # Optional: tmp2 directory.  If specified, will be passed to
        # chia plots create as -2.  Only one tmp2 directory is supported.
        # tmp2: /mnt/tmp/a

        # Optional: A list of one or more directories; the scheduler will
        # use all of them.  These again are presumed to be on independent
        # physical devices so writes (plot jobs) and reads (archivals) can
        # be scheduled to minimize IO contention.
        #
        # If dst is commented out, the tmp directories will be used as the
        # buffer.
        dst:{% for driver in data['driver_list']%}
                - {{driver['mount_path']}}{% endfor %}


# Plotting scheduling parameters
scheduling:
        # Run a job on a particular temp dir only if the number of existing jobs
        # before [tmpdir_stagger_phase_major : tmpdir_stagger_phase_minor]
        # is less than tmpdir_stagger_phase_limit.
        # Phase major corresponds to the plot phase, phase minor corresponds to
        # the table or table pair in sequence, phase limit corresponds to
        # the number of plots allowed before [phase major : phase minor].
        # e.g, with default settings, a new plot will start only when your plot
        # reaches phase [2 : 1] on your temp drive. This setting takes precidence
        # over global_stagger_m
        tmpdir_stagger_phase_major: {{config['tmpdir_stagger_phase_major']}}
        tmpdir_stagger_phase_minor: {{config['tmpdir_stagger_phase_minor']}}
        # Optional: default is 1
        tmpdir_stagger_phase_limit: {{config['tmpdir_stagger_phase_limit']}}

        # Don't run more than this many jobs at a time on a single temp dir.
        tmpdir_max_jobs: {{config['tmpdir_max_jobs']}}

        # Don't run more than this many jobs at a time in total.
        global_max_jobs: {{config['global_max_jobs']}}

        # Don't run any jobs (across all temp dirs) more often than this, in minutes.
        global_stagger_m: {{config['global_stagger_m']}}

        # How often the daemon wakes to consider starting a new plot job, in seconds.
        polling_time_s: 20

# Plotting parameters.  These are pass-through parameters to chia plots create.
# See documentation at
# https://github.com/Chia-Network/chia-blockchain/wiki/CLI-Commands-Reference#create
plotting:
        # Your public keys.  Be sure to use the pool contract address for
        # portable pool plots.  The pool public key is only for original
        # non-portable plots that can not be used with the official pooling
        # protocol.
        farmer_pk: {{data['farmer_key']}}
        pool_pk: {{data['pool_key']}}
        pool_contract_address: {{data['pool_contract_address']}}

        # If you enable Chia, plot in *parallel* with higher tmpdir_max_jobs and global_max_jobs
        type: chia
        chia:
                # The stock plotter: https://github.com/Chia-Network/chia-blockchain
                # executable: /path/to/chia
                k: {{config['k']}}                # k-size of plot, leave at 32 most of the time
                e: {{config['e']}}              # Use -e plotting option
                n_threads: {{config['n_threads']}}         # Threads per job
                n_buckets: {{config['n_buckets']}}         # Number of buckets to split data into
                job_buffer: {{config['job_buffer']}}       # Per job memory

        # If you enable madMAx, plot in *sequence* with very low tmpdir_max_jobs and global_max_jobs
        madmax:
                # madMAx plotter: https://github.com/madMAx43v3r/chia-plotter
                # executable: /path/to/chia_plot
                n_threads: 4          # Default is 4, crank up if you have many cores
                n_buckets: 256        # Default is 256
                n_buckets3: 256       # Default is 256
                n_rmulti2: 1          # Default is 1
        bladebit:
                # executable: /path/to/bladebit/.bin/release/bladebit
                threads: 2
                no_numa: false
